nodeimage: &nodeimage
  docker:
    - image: cimg/node:13.8.0
pythonalpineimage: &pythonalpineimage
  docker:
    - image: python:3.7-alpine3.11
awsimage: &awsimage
  docker:
    - image: amazon/aws-cli

version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters: &parameter
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


jobs:
  build-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-build

  build-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
     

  scan-backend:
    <<: *nodeimage
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install 
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    <<: *awsimage
    parameters: *parameter
    steps:
      - checkout
      - run:
          name: Install tar and gzip. # Workspace attachment needs tar and gzip which is not in awsimage https://www.youtube.com/watch?v=RhkaSfBlqCk 
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>" \
              --parameter-overrides ID="<< parameters.workflow_id >>"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filter "Name=tag:project, Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt     
      - destroy-environment

  configure-infrastructure:
    <<: *pythonalpineimage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b4:a0:d4:2d:fe:df:e0:9f:8c:73:86:cf:b1:db:87:19"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          no_output_timeout: 15m
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml -i inventory.txt

      - destroy-environment    
  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend      
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
